import requests
import logging
from config.app_config import logger, OLLAMA_API


def generate_quiz_with_ollama(
    content,
    num_questions=5,
    model="mistral",
    question_type="multipleChoice",
    additional_instructions="",
):
    """
    Generate a quiz using Ollama's Mistral model

    Args:
        content (str): Content to base the quiz on
        num_questions (int): Number of questions to generate
        model (str): LLM model to use
        question_type (str): Type of questions (multipleChoice, trueFalse, shortAnswer, flashcards)
        additional_instructions (str): Additional instructions for the LLM

    Returns:
        str: Raw quiz text generated by the LLM
    """
    logger.info("Starting quiz generation with Ollama")

    # Limit content length for token constraints
    if len(content) > 128000:
        logger.warning("Content too long, truncating to 128,000 characters")
        content = content[:128000]

    # Adjust prompt based on question type
    if question_type == "multipleChoice":
        format_instructions = f"""
        Generate a multiple-choice quiz based on this content:
        {content}

        The quiz should have {num_questions} questions and follow EXACTLY this format:

        1. [Question text]
        A) [Option 1]
        B) [Option 2]
        C) [Option 3]
        D) [Option 4]
        Correct answer: [A, B, C, or D]

        2. [Question text]
        A) [Option 1]
        B) [Option 2]
        C) [Option 3]
        D) [Option 4]
        Correct answer: [A, B, C, or D]
    

        And so on. IMPORTANT: 
        - Number the questions starting with 1.
        - Make each question challenging but fair
        - Ensure there is only ONE correct answer
        - Format the options exactly as shown with A), B), C), D)
        - End each question with "Correct answer: X" where X is the letter
        """
    elif question_type == "flashcards":
        format_instructions = f"""
        Generate a set of flashcards based on this content:
        {content}

        The flashcards should have {num_questions} cards and follow EXACTLY this format:

        1. [Front side - Term or question]
        Flip side: [Back side - Definition or answer]

        2. [Front side - Term or question]
        Flip side: [Back side - Definition or answer]

        And so on. IMPORTANT:
        - Number the cards starting with 1.
        - Make each flashcard cover important concepts or terminology from the content
        - Format exactly as shown with "Flip side:" marking the answer
        - Front sides should be concise questions, terms, or concepts
        - Back sides should provide clear, helpful explanations or definitions
        """
    elif question_type == "trueFalse":
        format_instructions = f"""
        Generate a true/false quiz based on this content:
        {content}

        The quiz should have {num_questions} questions and follow EXACTLY this format:

        1. [Question text]
        A) True
        B) False
        Correct answer: [A or B]

        2. [Question text]
        A) True
        B) False
        Correct answer: [A or B]

        And so on. IMPORTANT:
        - Number the questions starting with 1.
        - Make each question testing accurate information from the content
        - Format the options exactly as shown with A), B)
        - End each question with "Correct answer: X" where X is the letter
        """
    else:  # Short answer
        format_instructions = f"""
        Generate a short answer quiz based on this content:
        {content}

        The quiz should have {num_questions} questions and follow EXACTLY this format:

        1. [Question text]
        Correct answer: [Brief answer]

        2. [Question text]
        Correct answer: [Brief answer]

        And so on. IMPORTANT:
        - Number the questions starting with 1.
        - Make each question testing specific information from the content
        - Format the answer as "Correct answer: [brief answer]"
        - Keep answers concise but complete
        """

    # Add any additional instructions from the user
    if additional_instructions:
        format_instructions += f"\n\nAdditional instructions: {additional_instructions}"

    # Prepare payload for Ollama API
    payload = {"model": model, "prompt": format_instructions, "stream": False}

    try:
        # Add timeout to the Ollama API call
        response = requests.post(
            OLLAMA_API, json=payload, timeout=300
        )  # 5-minute timeout

        if response.status_code == 200:
            # Get the full response
            response_json = response.json()
            raw_quiz = response_json.get("response", "No response received.")

            # Log the complete response
            logger.info("Ollama raw response:")
            logger.info(raw_quiz)

            # Also log information about tokens
            if "eval_count" in response_json:
                logger.info(f"Tokens used: {response_json.get('eval_count')}")
            if "eval_duration" in response_json:
                logger.info(f"Generation time: {response_json.get('eval_duration')}ns")

            return raw_quiz
        else:
            logger.error(f"Error from Ollama API: {response.status_code}")
            logger.error(response.text)
            return None
    except requests.exceptions.Timeout:
        logger.error("Timeout while calling Ollama API")
        return None
    except Exception as e:
        logger.error(f"Exception when calling Ollama API: {e}")
        return None
